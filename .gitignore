.vscode
Chapter 2. Constructors, Destructors, and Assignment Operators/Item 8 Prevent exceptions from leaving destructors/item8
Chapter 2. Constructors, Destructors, and Assignment Operators/Item 10 Have assignment operators return a reference to *this/item10
Chapter 2. Constructors, Destructors, and Assignment Operators/Item 7 Declare destructors virtual in polymorphic base classes/item7
Chapter 2. Constructors, Destructors, and Assignment Operators/Item 9 Never call virtual functions during construction or destruction/item9
Chapter 2. Constructors, Destructors, and Assignment Operators/Item 12 Copy all parts of an object/item12
Chapter 2. Constructors, Destructors, and Assignment Operators/Item 11 Handle assignment to self in operator=/core
Chapter 2. Constructors, Destructors, and Assignment Operators/Item 11 Handle assignment to self in operator=/item11
Chapter 4. Designs and Declarations/Item 20 Prefer pass-by-reference-to-const to pass-by-value/item20
Chapter 4. Designs and Declarations/Item 18 Make interfaces easy to use correctly and hard to use incorrectly/item18
Chapter 4. Designs and Declarations/Item 24 Declare non-member functions when type conversions should apply to all parameters/item24
Chapter 4. Designs and Declarations/Item 21 Do not try to return a reference when you must return an object/item21
Chapter 3. Resource Management/Item 15 Provide access to raw resources in resource-managing classes/item15
Chapter 3. Resource Management/Item 16 Use the same form in corresponding uses of new and delete/core
Chapter 3. Resource Management/Item 16 Use the same form in corresponding uses of new and delete/item16
Chapter 3. Resource Management/Item 17 Store newed objects in smart pointers in standalone statements/core
Chapter 3. Resource Management/Item 17 Store newed objects in smart pointers in standalone statements/item17
Chapter 4. Designs and Declarations/Item 25 Consider support for a non-throwing swap/item25
Chapter 5. Implementations/Item 27  Minimize casting/item27
Chapter 5. Implementations/Item 28 Avoid returning handles to object internals/item28
Chapter 5. Implementations/Item 29 Strive for exception-safe code/item29
Chapter 5. Implementations/Item 26 Postpone variable definitions as long as possible/item26
Chapter 5. Implementations/Item 30 Understand the ins and outs of inlining/item30
Chapter 5. Implementations/Item 31 Minimize compilation dependencies between files/item31
Chapter 6. Inheritance and Object-Oriented Design/Item 35 Consider alternatives to virtual functions/item35
Chapter 6. Inheritance and Object-Oriented Design/Item 33 Avoid hiding inherited names/item33
Chapter 6. Inheritance and Object-Oriented Design/Item 34 Differentiate between inheritance of interface and inheritance of implementation/item34
Chapter 6. Inheritance and Object-Oriented Design/Item 32 Make sure public inheritance models "is-a."/item32
Chapter 6. Inheritance and Object-Oriented Design/Item 40 Use multiple inheritance judiciously/item40
Chapter 6. Inheritance and Object-Oriented Design/Item 36 Never redefine an inherited non-virtual function/item36
Chapter 6. Inheritance and Object-Oriented Design/Item 39 Use private inheritance judiciously/item39
Chapter 6. Inheritance and Object-Oriented Design/Item 37 Never redefine a function's inherited default parameter value/item37
Chapter 6. Inheritance and Object-Oriented Design/Item 38 Model "has-a" or "is-implemented-in-terms-of" through composition/item38
Chapter 7. Templates and Generic Programming/Item 41 Understand implicit interfaces and compile-time polymorphism/item41
Chapter 7. Templates and Generic Programming/Item 42 Understand the two meanings of typename/item42
Chapter 7. Templates and Generic Programming/Item 43 Know how to access names in templatized base classes/item43
Chapter 7. Templates and Generic Programming/Item 44 Factor parameter-independent code out of templates/item44
Chapter 7. Templates and Generic Programming/Item 45 Use member function templates to accept all compatible types/item45
Chapter 7. Templates and Generic Programming/Item 46 Define non-member functions inside templates when type conversions are desired/item46
Chapter 7. Templates and Generic Programming/Item 47 Use traits classes for information about types/item47
Chapter 7. Templates and Generic Programming/Item 48 Be aware of template metaprogramming/item48
